{
  "name": "Telegram Calendar AI Agent",
  "nodes": [
    {
      "parameters": {
        "updates": ["message"],
        "additionalFields": {}
      },
      "id": "telegram-trigger",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [240, 360],
      "webhookId": "telegram-webhook-calendar",
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-credentials",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Extract and format message data for AI Agent\nconst message = $input.item.json.message;\nconst chatId = message.chat.id;\nconst userId = message.from.id;\nconst userName = message.from.first_name || 'User';\nconst messageText = message.text;\n\n// Create context for the AI agent\nconst systemContext = `You are a helpful calendar management assistant. The user's name is ${userName}. \nYou can help with:\n- Creating calendar events\n- Listing/viewing events \n- Updating existing events\n- Deleting events\n- Checking availability\n- Searching for specific events\n\nAlways be friendly and provide clear confirmations of actions taken.\nUse the available Google Calendar tools to perform the requested operations.\nWhen creating events, if time zone isn't specified, assume the user's local time zone.\nFor date parsing, today is ${new Date().toISOString().split('T')[0]}.\n\nRespond in a conversational, helpful manner with appropriate emojis.`;\n\nreturn {\n  chatId: chatId,\n  userId: userId,\n  userName: userName,\n  userMessage: messageText,\n  systemContext: systemContext,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "prepare-ai-input",
      "name": "Prepare AI Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [440, 360]
    },
    {
      "parameters": {
        "agent": "toolsAgent",
        "promptType": "define",
        "text": "={{ $json.systemContext }}",
        "hasOutputParser": false,
        "options": {
          "systemMessage": "={{ $json.systemContext }}",
          "humanMessage": "={{ $json.userMessage }}",
          "maxIterations": 5
        },
        "tools": [
          "create-calendar-event",
          "get-calendar-event", 
          "list-calendar-events",
          "update-calendar-event",
          "delete-calendar-event",
          "search-calendar-events",
          "check-calendar-availability"
        ],
        "model": {
          "__rl": true,
          "value": "gpt-4",
          "mode": "list"
        }
      },
      "id": "ai-agent",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [640, 360],
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "name": "create-calendar-event",
        "description": "Create a new calendar event. Use this when user wants to schedule, create, add, or book an event/meeting/appointment.",
        "workflowId": "{{ $workflow.id }}",
        "specifyInputSchema": true,
        "inputSchema": {
          "type": "object",
          "properties": {
            "summary": {
              "type": "string",
              "description": "Event title/summary"
            },
            "description": {
              "type": "string", 
              "description": "Event description (optional)"
            },
            "startDateTime": {
              "type": "string",
              "description": "Start date and time in ISO format (e.g., 2024-01-15T09:00:00Z)"
            },
            "endDateTime": {
              "type": "string",
              "description": "End date and time in ISO format (e.g., 2024-01-15T10:00:00Z)"
            },
            "location": {
              "type": "string",
              "description": "Event location (optional)"
            },
            "attendees": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of attendee email addresses (optional)"
            }
          },
          "required": ["summary", "startDateTime", "endDateTime"]
        }
      },
      "id": "create-calendar-event",
      "name": "Create Event",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.1,
      "position": [520, 180]
    },
    {
      "parameters": {
        "resource": "event",
        "operation": "create",
        "calendar": {
          "__rl": true,
          "value": "primary",
          "mode": "list"
        },
        "summary": "={{ $json.summary }}",
        "start": "={{ $json.startDateTime }}",
        "end": "={{ $json.endDateTime }}",
        "description": "={{ $json.description || 'Created via Telegram Calendar Bot' }}",
        "additionalFields": {
          "location": "={{ $json.location }}",
          "attendees": "={{ $json.attendees ? $json.attendees.map(email => ({ email })) : [] }}"
        }
      },
      "id": "google-create-event",
      "name": "Google Create Event",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1,
      "position": [720, 180],
      "credentials": {
        "googleCalendarOAuth2": {
          "id": "google-calendar-oauth",
          "name": "Google Calendar OAuth2"
        }
      }
    },
    {
      "parameters": {
        "name": "list-calendar-events",
        "description": "List calendar events for a specific time range. Use when user wants to see their schedule, events, or what's coming up.",
        "workflowId": "{{ $workflow.id }}",
        "specifyInputSchema": true,
        "inputSchema": {
          "type": "object",
          "properties": {
            "timeMin": {
              "type": "string",
              "description": "Start time for events to list (ISO format)"
            },
            "timeMax": {
              "type": "string", 
              "description": "End time for events to list (ISO format)"
            },
            "maxResults": {
              "type": "number",
              "description": "Maximum number of events to return (default: 20)"
            },
            "query": {
              "type": "string",
              "description": "Search query to filter events (optional)"
            }
          },
          "required": ["timeMin", "timeMax"]
        }
      },
      "id": "list-calendar-events",
      "name": "Get Many Events",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.1,
      "position": [520, 300]
    },
    {
      "parameters": {
        "resource": "event",
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "primary",
          "mode": "list"
        },
        "options": {
          "timeMin": "={{ $json.timeMin }}",
          "timeMax": "={{ $json.timeMax }}",
          "maxResults": "={{ $json.maxResults || 20 }}",
          "orderBy": "startTime",
          "singleEvents": true,
          "q": "={{ $json.query }}"
        }
      },
      "id": "google-list-events",
      "name": "Google List Events", 
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1,
      "position": [720, 300],
      "credentials": {
        "googleCalendarOAuth2": {
          "id": "google-calendar-oauth",
          "name": "Google Calendar OAuth2"
        }
      }
    },
    {
      "parameters": {
        "name": "get-calendar-event",
        "description": "Get details of a specific calendar event by ID.",
        "workflowId": "{{ $workflow.id }}",
        "specifyInputSchema": true,
        "inputSchema": {
          "type": "object",
          "properties": {
            "eventId": {
              "type": "string",
              "description": "The ID of the event to retrieve"
            }
          },
          "required": ["eventId"]
        }
      },
      "id": "get-calendar-event",
      "name": "Get Event",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.1,
      "position": [520, 420]
    },
    {
      "parameters": {
        "resource": "event",
        "operation": "get",
        "calendar": {
          "__rl": true,
          "value": "primary",
          "mode": "list"
        },
        "eventId": "={{ $json.eventId }}"
      },
      "id": "google-get-event",
      "name": "Google Get Event",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1,
      "position": [720, 420],
      "credentials": {
        "googleCalendarOAuth2": {
          "id": "google-calendar-oauth",
          "name": "Google Calendar OAuth2"
        }
      }
    },
    {
      "parameters": {
        "name": "update-calendar-event",
        "description": "Update an existing calendar event. Use when user wants to modify, change, or edit an event.",
        "workflowId": "{{ $workflow.id }}",
        "specifyInputSchema": true,
        "inputSchema": {
          "type": "object",
          "properties": {
            "eventId": {
              "type": "string",
              "description": "The ID of the event to update"
            },
            "summary": {
              "type": "string",
              "description": "Updated event title/summary (optional)"
            },
            "description": {
              "type": "string",
              "description": "Updated event description (optional)"
            },
            "startDateTime": {
              "type": "string", 
              "description": "Updated start date and time in ISO format (optional)"
            },
            "endDateTime": {
              "type": "string",
              "description": "Updated end date and time in ISO format (optional)"
            },
            "location": {
              "type": "string",
              "description": "Updated event location (optional)"
            }
          },
          "required": ["eventId"]
        }
      },
      "id": "update-calendar-event",
      "name": "Update Event",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.1,
      "position": [520, 540]
    },
    {
      "parameters": {
        "resource": "event",
        "operation": "update",
        "calendar": {
          "__rl": true,
          "value": "primary",
          "mode": "list"
        },
        "eventId": "={{ $json.eventId }}",
        "updateFields": {
          "summary": "={{ $json.summary }}",
          "description": "={{ $json.description }}",
          "start": "={{ $json.startDateTime }}",
          "end": "={{ $json.endDateTime }}",
          "location": "={{ $json.location }}"
        }
      },
      "id": "google-update-event",
      "name": "Google Update Event",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1,
      "position": [720, 540],
      "credentials": {
        "googleCalendarOAuth2": {
          "id": "google-calendar-oauth",
          "name": "Google Calendar OAuth2"
        }
      }
    },
    {
      "parameters": {
        "name": "delete-calendar-event",
        "description": "Delete a calendar event. Use when user wants to remove, cancel, or delete an event.",
        "workflowId": "{{ $workflow.id }}",
        "specifyInputSchema": true,
        "inputSchema": {
          "type": "object",
          "properties": {
            "eventId": {
              "type": "string",
              "description": "The ID of the event to delete"
            }
          },
          "required": ["eventId"]
        }
      },
      "id": "delete-calendar-event",
      "name": "Delete Event",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.1,
      "position": [520, 660]
    },
    {
      "parameters": {
        "resource": "event",
        "operation": "delete",
        "calendar": {
          "__rl": true,
          "value": "primary",
          "mode": "list"
        },
        "eventId": "={{ $json.eventId }}"
      },
      "id": "google-delete-event",
      "name": "Google Delete Event",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1,
      "position": [720, 660],
      "credentials": {
        "googleCalendarOAuth2": {
          "id": "google-calendar-oauth",
          "name": "Google Calendar OAuth2"
        }
      }
    },
    {
      "parameters": {
        "name": "search-calendar-events",
        "description": "Search for events by keyword or phrase. Use when user wants to find specific events.",
        "workflowId": "{{ $workflow.id }}",
        "specifyInputSchema": true,
        "inputSchema": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "Search query to find events"
            },
            "timeMin": {
              "type": "string",
              "description": "Start time for search range (ISO format, optional)"
            },
            "timeMax": {
              "type": "string",
              "description": "End time for search range (ISO format, optional)"
            },
            "maxResults": {
              "type": "number",
              "description": "Maximum number of results (default: 10)"
            }
          },
          "required": ["query"]
        }
      },
      "id": "search-calendar-events",
      "name": "Search Event",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.1,
      "position": [520, 780]
    },
    {
      "parameters": {
        "resource": "event",
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "primary",
          "mode": "list"
        },
        "options": {
          "q": "={{ $json.query }}",
          "timeMin": "={{ $json.timeMin }}",
          "timeMax": "={{ $json.timeMax }}",
          "maxResults": "={{ $json.maxResults || 10 }}",
          "orderBy": "startTime",
          "singleEvents": true
        }
      },
      "id": "google-search-events",
      "name": "Google Search Events",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1,
      "position": [720, 780],
      "credentials": {
        "googleCalendarOAuth2": {
          "id": "google-calendar-oauth",
          "name": "Google Calendar OAuth2"
        }
      }
    },
    {
      "parameters": {
        "name": "check-calendar-availability",
        "description": "Check if a time slot is free or busy. Use when user asks about availability.",
        "workflowId": "{{ $workflow.id }}",
        "specifyInputSchema": true,
        "inputSchema": {
          "type": "object",
          "properties": {
            "timeMin": {
              "type": "string",
              "description": "Start time to check (ISO format)"
            },
            "timeMax": {
              "type": "string", 
              "description": "End time to check (ISO format)"
            }
          },
          "required": ["timeMin", "timeMax"]
        }
      },
      "id": "check-calendar-availability",
      "name": "Check Availability",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.1,
      "position": [520, 900]
    },
    {
      "parameters": {
        "resource": "freebusy",
        "operation": "get",
        "timeMin": "={{ $json.timeMin }}",
        "timeMax": "={{ $json.timeMax }}",
        "items": "primary"
      },
      "id": "google-check-availability",
      "name": "Google Check Availability",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1,
      "position": [720, 900],
      "credentials": {
        "googleCalendarOAuth2": {
          "id": "google-calendar-oauth",
          "name": "Google Calendar OAuth2"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Format AI response for Telegram\nconst aiResponse = $input.item.json.output || $input.item.json.text || 'I processed your request.';\nconst chatId = $input.first().json.chatId;\n\n// Clean up the response text\nlet responseText = aiResponse;\n\n// Remove any markdown that Telegram doesn't support well\nresponseText = responseText.replace(/```[\\s\\S]*?```/g, '');\nresponseText = responseText.replace(/`([^`]+)`/g, '$1');\n\n// Ensure the response isn't too long (Telegram limit is 4096 characters)\nif (responseText.length > 4000) {\n  responseText = responseText.substring(0, 4000) + '... (truncated)';\n}\n\nreturn {\n  chatId: chatId,\n  text: responseText\n};"
      },
      "id": "format-response",
      "name": "Format Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [840, 360]
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "telegram-response",
      "name": "Telegram Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [1040, 360],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-credentials",
          "name": "Telegram Bot API"
        }
      }
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Prepare AI Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare AI Input": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Event": {
      "main": [
        [
          {
            "node": "Google Create Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Create Event": {
      "main": [
        []
      ]
    },
    "Get Many Events": {
      "main": [
        [
          {
            "node": "Google List Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google List Events": {
      "main": [
        []
      ]
    },
    "Get Event": {
      "main": [
        [
          {
            "node": "Google Get Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Get Event": {
      "main": [
        []
      ]
    },
    "Update Event": {
      "main": [
        [
          {
            "node": "Google Update Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Update Event": {
      "main": [
        []
      ]
    },
    "Delete Event": {
      "main": [
        [
          {
            "node": "Google Delete Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Delete Event": {
      "main": [
        []
      ]
    },
    "Search Event": {
      "main": [
        [
          {
            "node": "Google Search Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Search Events": {
      "main": [
        []
      ]
    },
    "Check Availability": {
      "main": [
        [
          {
            "node": "Google Check Availability",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Check Availability": {
      "main": [
        []
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Telegram Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["telegram", "calendar", "ai-agent"],
  "triggerCount": 1,
  "updatedAt": "2025-01-20T12:00:00.000Z",
  "versionId": "2"
}